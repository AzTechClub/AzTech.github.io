*HERMET BEZIER*


import numpy as np
import matplotlib.pyplot as plt

def hermite_curve(p1, p4, r1, r4, t):
    """Generate points for a Hermite curve."""
    h00 = 2*t**3 - 3*t**2 + 1
    h10 = t**3 - 2*t**2 + t
    h01 = -2*t**3 + 3*t**2
    h11 = t**3 - t**2
    
    # Calculate the curve points
    x = h00 * p1[0] + h10 * r1[0] + h01 * p4[0] + h11 * r4[0]
    y = h00 * p1[1] + h10 * r1[1] + h01 * p4[1] + h11 * r4[1]
    
    return x, y

def bezier_curve(p0, p1, p2, p3, t):
    """Generate points for a cubic Bezier curve."""
    B0 = (1 - t)**3
    B1 = 3 * t * (1 - t)**2
    B2 = 3 * t**2 * (1 - t)
    B3 = t**3
    
    # Calculate the curve points
    x = B0 * p0[0] + B1 * p1[0] + B2 * p2[0] + B3 * p3[0]
    y = B0 * p0[1] + B1 * p1[1] + B2 * p2[1] + B3 * p3[1]
    
    return x, y

# Hermite Curve Parameters
p1 = [0, 0]  # Start point
p4 = [4, 3]  # End point
r1 = [3, 5]  # Tangent vector at start
r4 = [-2, -4]  # Tangent vector at end

# Bezier Curve Parameters
p0 = [0, 0]  # Start point
p1_b = [1, 2]  # Control point 1
p2_b = [3, 3]  # Control point 2
p3 = [4, 0]  # End point

# Generate parameter t
t = np.linspace(0, 1, 100)

# Compute Hermite curve points
hermite_x, hermite_y = hermite_curve(p1, p4, r1, r4, t)

# Compute Bezier curve points
bezier_x, bezier_y = bezier_curve(p0, p1_b, p2_b, p3, t)

# Plot the curves
plt.figure(figsize=(10, 6))

# Hermite curve
plt.plot(hermite_x, hermite_y, label="Hermite Curve", color="blue")
plt.scatter([p1[0], p4[0]], [p1[1], p4[1]], color="blue", zorder=5, label="Hermite Points")

# Bezier curve
plt.plot(bezier_x, bezier_y, label="Bezier Curve", color="red")
plt.scatter([p0[0], p1_b[0], p2_b[0], p3[0]], [p0[1], p1_b[1], p2_b[1], p3[1]], color="red", zorder=5, label="Bezier Points")

# Styling the plot
plt.title("Hermite and Bezier Curves")
plt.xlabel("X")
plt.ylabel("Y")
plt.axhline(0, color="black", linewidth=0.5, linestyle="--")
plt.axvline(0, color="black", linewidth=0.5, linestyle="--")
plt.legend()
plt.grid()
plt.show()




*ELLIPSE*


import matplotlib.pyplot as plt

def midpointEllipse(a, b):
    x1 = []
    y1 = []
    x2 = []
    y2 = []
    x3 = []
    y3 = []
    x4 = []
    y4 = []
    
    
    x = 0
    y = b
    d1 = (b**2) - (a**2 * b) + (0.25 * a**2)
    
    while (a**2 * (y - 0.5)) > (b**2 * (x + 1)):
        if d1 < 0:
            d1 += (b**2 * (2 * x + 3))
        else:
            d1 += (b**2 * (2 * x + 3)) + (a**2 * (-2 * y + 2))
            y -= 1
        x += 1
        x1.append(x)
        y1.append(y)
        x2.append(-x)
        y2.append(y)
        x3.append(x)
        y3.append(-y)
        x4.append(-x)
        y4.append(-y)
    
    d2 = (b**2 * ((x + 0.5)**2)) + (a**2 * ((y - 1)**2)) - (a**2 * b**2)
    
    while y > 0:
        if d2 < 0:
            d2 += (b**2 * (2 * x + 2)) + (a**2 * (-2 * y + 3))
            x += 1
        else:
            d2 += (a**2 * (-2 * y + 3))
        y -= 1
        x1.append(x)
        y1.append(y)
        x2.append(-x)
        y2.append(y)
        x3.append(x)
        y3.append(-y)
        x4.append(-x)
        y4.append(-y)
        return x1,y1,x2,y2,x3,y3,x4,y4


x1,y1,x2,y2,x3,y3,x4,y4=midpointEllipse(a,b)
a = 1000
b = 500
midpointEllipse(a, b)
plt.plot(x1, y1)
plt.plot(x2, y2)
plt.plot(x3, y3)
plt.plot(x4, y4)



*2D TRANSFORMATION*


import numpy as np

def translate(x, y):
    """Translation matrix"""
    return np.array([
        [1, 0, x],
        [0, 1, y],
        [0, 0, 1]
    ])

def rotate(theta):
    """Rotation matrix (counter-clockwise)"""
    c, s = np.cos(theta), np.sin(theta)
    return np.array([
        [c, -s, 0],
        [s,  c, 0],
        [0,  0, 1]
    ])

def scale(sx, sy):
    """Scaling matrix"""
    return np.array([
        [sx, 0, 0],
        [0, sy, 0],
        [0,  0, 1]
    ])

# Example usage
point = np.array([2, 3, 1])  # Homogeneous coordinates

# Translate by (1, 2)
translated_point = np.dot(translate(1, 2), point)

# Rotate by 45 degrees
rotated_point = np.dot(rotate(np.pi/4), point)

# Scale by (2, 0.5)
scaled_point = np.dot(scale(2, 0.5), point)

print("Original point:", point[:2])
print("Translated point:", translated_point[:2])
print("Rotated point:", rotated_point[:2])
print("Scaled point:", scaled_point[:2])



*POLYGON SCAN LINE FILL*


def scanline_fill(polygon, image):
    # Create a mask for the polygon
    mask = np.zeros(image.shape, dtype=np.uint8)

    # Get the bounds of the polygon
    min_x = int(min(polygon[:, 0]))
    max_x = int(max(polygon[:, 0]))
    min_y = int(min(polygon[:, 1]))
    max_y = int(max(polygon[:, 1]))

    # Process each scanline
    for y in range(min_y, max_y + 1):
        intersections = []
        for i in range(len(polygon)):
            p1 = polygon[i]
            p2 = polygon[(i + 1) % len(polygon)]
            if (p1[1] > y) != (p2[1] > y):  # Check if y intersects
                x = (p2[0] - p1[0]) * (y - p1[1]) / (p2[1] - p1[1]) + p1[0]
                intersections.append(x)

        intersections.sort()
        for j in range(0, len(intersections), 2):
            x_start = int(np.ceil(intersections[j]))
            x_end = int(np.floor(intersections[j + 1]))
            mask[y, x_start:x_end + 1] = 255

    return mask

# Example Usage
polygon = np.array([[200, 300], [300, 200], [325, 350]])
image = np.zeros((400, 400), dtype=np.uint8)

filled_image = scanline_fill(polygon, image)

plt.imshow(filled_image, cmap='gray')
plt.title("Polygon Filling using Scanline Algorithm")
plt.show()

*DDA*



import matplotlib.pyplot as plt
x1 = int(input("enter the value of x1: "))
x2 = int(input("enter the value of x2: "))
y1 = int(input("enter the value of y1: "))
y2 = int(input("enter the value of y2: "))
dx = x2 - x1
dy = y2 - y1

steps = max(dx,dy)

xinc = dx/steps
yinc = dy/steps

i = 0

x_co =[] 
y_co =[]

while i < steps:
    i+=1
    x1 += xinc
    y1 += yinc
    print("x1: ", x1 , "y1: ",y1)
    x_co.append(x1)
    y_co.append(y1)

plt.plot(x_co,y_co)
plt.xlabel("X-Axis")
plt.ylabel("Y-Axis")

plt.title("DDA Algorithm")
plt.show()



*MIDPOINT CIRCLE*



def circle():
    x1=[]
    x2=[]
    x3=[]
    x4=[]
    x5=[]
    x6=[]
    x7=[]
    x8=[]
    y1=[]
    y2=[]
    y3=[]
    y4=[]
    y5=[]
    y6=[]
    y7=[]
    y8=[]
    x=0
    r=int(input('Enter the radius : '))
    y=r
    d=1 - r
    while(y>x) :
        if (d<0):
            d += 2*x +3
        else :
            d += 2*(x-y) +5
            x1.append(x)
            x2.append(y)
            x3.append(-y)
            x4.append(x)
            x5.append(-x)
            x6.append(-y)
            x7.append(-x)
            x8.append(y)
            
            y-=1
            
            y1.append(y)
            y2.append(x)
            y3.append(x)
            y4.append(-y)
            y5.append(-y)
            y6.append(-x)
            y7.append(y)
            y8.append(-x)
        
            
        x+=1
    plt.plot(x1,y1,color ='red')
    plt.plot(x2,y2,color ='gold' )
    plt.plot(x3,y3,color ='gold')
    plt.plot(x4,y4,color='red')
    plt.plot(x5,y5,color ='red')
    plt.plot(x6,y6,color='gold')
    plt.plot(x7,y7,color ='red')
    plt.plot(x8,y8,color='gold')

circle()




*BRESENHAM LINE*



import matplotlib.pyplot as plt

def bresenham_line(x1, y1, x2, y2):
    """
    Bresenham's Line Drawing Algorithm.
    :param x1: Starting x-coordinate
    :param y1: Starting y-coordinate
    :param x2: Ending x-coordinate
    :param y2: Ending y-coordinate
    :return: List of points on the line
    """
    points = []  # List to store the points of the line
    
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    sx = 1 if x2 > x1 else -1
    sy = 1 if y2 > y1 else -1
    
    if dx > dy:
        err = dx // 2
        while x1 != x2:
            points.append((x1, y1))
            err -= dy
            if err < 0:
                y1 += sy
                err += dx
            x1 += sx
    else:
        err = dy // 2
        while y1 != y2:
            points.append((x1, y1))
            err -= dx
            if err < 0:
                x1 += sx
                err += dy
            y1 += sy

    points.append((x2, y2))  # Add the last point
    return points

# Define the starting and ending points of the line
x_start, y_start = 2, 3
x_end, y_end = 15, 10

# Get the points using Bresenham's algorithm
line_points = bresenham_line(x_start, y_start, x_end, y_end)

# Extract X and Y coordinates for plotting
x_coords, y_coords = zip(*line_points)

# Plot the points
plt.figure(figsize=(8, 8))
plt.scatter(x_coords, y_coords, color="blue", label="Bresenham Line", zorder=5)
plt.plot(x_coords, y_coords, color="red", linestyle="--", alpha=0.5)

# Annotate the start and end points
plt.scatter([x_start, x_end], [y_start, y_end], color="green", zorder=6, label="Start/End Points")
plt.text(x_start, y_start, f"Start ({x_start}, {y_start})", color="green", fontsize=10)
plt.text(x_end, y_end, f"End ({x_end}, {y_end})", color="green", fontsize=10)

# Add grid, labels, and legend
plt.grid(color="gray", linestyle="--", linewidth=0.5)
plt.title("Bresenham's Line Drawing Algorithm", fontsize=14)
plt.xlabel("X-axis", fontsize=12)
plt.ylabel("Y-axis", fontsize=12)
plt.axhline(0, color="black", linewidth=0.5)
plt.axvline(0, color="black", linewidth=0.5)
plt.legend()
plt.gca().set_aspect('equal', adjustable='box')
plt.show()



*SUGER HODEMAN POLYGON CLIP*



import matplotlib.pyplot as plt

def inside(point, edge):
    """
    Check if a point is inside a given edge.
    :param point: A tuple (x, y).
    :param edge: A tuple ((x1, y1), (x2, y2)) representing the clipping edge.
    :return: True if the point is inside, otherwise False.
    """
    x, y = point
    (x1, y1), (x2, y2) = edge
    return (x2 - x1) * (y - y1) - (y2 - y1) * (x - x1) >= 0

def compute_intersection(p1, p2, edge):
    """
    Compute the intersection of a line segment with a clipping edge.
    :param p1: Start point of the line segment (x1, y1).
    :param p2: End point of the line segment (x2, y2).
    :param edge: A tuple ((x1, y1), (x2, y2)) representing the clipping edge.
    :return: Intersection point (x, y).
    """
    (x1, y1), (x2, y2) = edge
    dx = p2[0] - p1[0]
    dy = p2[1] - p1[1]
    edge_dx = x2 - x1
    edge_dy = y2 - y1

    if dx * edge_dy == dy * edge_dx:
        return None  # Parallel lines (shouldn't happen in a convex polygon)
    
    t = ((x1 - p1[0]) * edge_dy - (y1 - p1[1]) * edge_dx) / (dx * edge_dy - dy * edge_dx)
    return (p1[0] + t * dx, p1[1] + t * dy)

def sutherland_hodgman(polygon, clip_window):
    """
    Sutherland-Hodgman Polygon Clipping Algorithm.
    :param polygon: List of points [(x1, y1), (x2, y2), ...] representing the polygon.
    :param clip_window: List of points [(x1, y1), (x2, y2), ...] representing the clipping window.
    :return: List of points representing the clipped polygon.
    """
    output_list = polygon
    for i in range(len(clip_window)):
        input_list = output_list
        output_list = []
        
        clip_edge = (clip_window[i], clip_window[(i + 1) % len(clip_window)])
        
        for j in range(len(input_list)):
            current_point = input_list[j]
            prev_point = input_list[j - 1]
            
            if inside(current_point, clip_edge):
                if not inside(prev_point, clip_edge):
                    output_list.append(compute_intersection(prev_point, current_point, clip_edge))
                output_list.append(current_point)
            elif inside(prev_point, clip_edge):
                output_list.append(compute_intersection(prev_point, current_point, clip_edge))
    
    return output_list

# Define the polygon and clipping window
polygon = [(1, 2), (4, 5), (7, 2), (6, -1), (2, -1)]  # Polygon vertices
clip_window = [(2, 1), (6, 1), (6, -2), (2, -2)]      # Clipping window vertices (rectangular)

# Apply the clipping algorithm
clipped_polygon = sutherland_hodgman(polygon, clip_window)

# Extract coordinates for plotting
polygon_x, polygon_y = zip(*polygon + [polygon[0]])  # Close the polygon loop
clip_x, clip_y = zip(*clip_window + [clip_window[0]])  # Close the clipping window loop
if clipped_polygon:
    clipped_x, clipped_y = zip(*clipped_polygon + [clipped_polygon[0]])  # Close the clipped polygon loop
else:
    clipped_x, clipped_y = [], []  # No points in the clipped polygon

# Plot the original polygon, clipping window, and clipped polygon
plt.figure(figsize=(10, 8))

# Original polygon
plt.plot(polygon_x, polygon_y, 'b-', label="Original Polygon", linewidth=2)
plt.scatter(*zip(*polygon), color='blue')

# Clipping window
plt.plot(clip_x, clip_y, 'r--', label="Clipping Window", linewidth=2)
plt.scatter(*zip(*clip_window), color='red')

# Clipped polygon
if clipped_polygon:
    plt.plot(clipped_x, clipped_y, 'g-', label="Clipped Polygon", linewidth=2)
    plt.scatter(clipped_x, clipped_y, color='green')

# Add grid, labels, and legend
plt.grid(color="gray", linestyle="--", linewidth=0.5)
plt.title("Sutherland-Hodgman Polygon Clipping", fontsize=14)
plt.xlabel("X-axis", fontsize=12)
plt.ylabel("Y-axis", fontsize=12)
plt.axhline(0, color="black", linewidth=0.5)
plt.axvline(0, color="black", linewidth=0.5)
plt.legend()
plt.gca().set_aspect('equal', adjustable='box')
plt.show()



*COEHN SUTHERLAND LINE CLIPPING*





def compute_outcode(x, y, xmin, xmax, ymin, ymax):
  
  code = 0
  if y > ymax:
    code |= 1  # Top
  elif y < ymin:
    code |= 2  # Bottom
  if x > xmax:
    code |= 4  # Right
  elif x < xmin:
    code |= 8  # Left
  return code


def cohen_sutherland_line_clip(x0, y0, x1, y1, xmin, xmax, ymin, ymax):
  

  outcode0 = compute_outcode(x0, y0, xmin, xmax, ymin, ymax)
  outcode1 = compute_outcode(x1, y1, xmin, xmax, ymin, ymax)
  accept = False

  while True:
    if not (outcode0 | outcode1):  # Both endpoints inside clip window
      accept = True
      break
    elif outcode0 & outcode1:  # Both endpoints outside on same side
      break
    else:  # Calculate intersection point with clip edge
      x = 0
      y = 0
      outcode_out = outcode0 if outcode0 else outcode1

      if outcode_out & 1:  # Top edge
        x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0)
        y = ymax
      elif outcode_out & 2:  # Bottom edge
        x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0)
        y = ymin
      elif outcode_out & 4:  # Right edge
        y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0)
        x = xmax
      elif outcode_out & 8:  # Left edge
        y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0)
        x = xmin

     
      if outcode_out == outcode0:
        x0 = x
        y0 = y
        outcode0 = compute_outcode(x0, y0, xmin, xmax, ymin, ymax)
      else:
        x1 = x
        y1 = y
        outcode1 = compute_outcode(x1, y1, xmin, xmax, ymin, ymax)

  return accept, x0, y0, x1, y1


xmin, xmax, ymin, ymax = 10, 250, 30, 350
x0, y0, x1, y1 = 10, 10, 350, 260

accept, clipped_x0, clipped_y0, clipped_x1, clipped_y1 = cohen_sutherland_line_clip(
    x0, y0, x1, y1, xmin, xmax, ymin, ymax
)

if accept:
  print("Clipped Line:", (clipped_x0, clipped_y0), (clipped_x1, clipped_y1))
else:
  print("Line is completely outside the clip window")


plt.figure(figsize=(8, 8))
plt.xlim(0, 500)
plt.ylim(0, 500)


plt.gca().add_patch(plt.Rectangle((xmin, ymin), xmax - xmin, ymax - ymin, fill=False))


plt.plot([x0, x1], [y0, y1], 'b', label='Original Line')


if accept:
  plt.plot([clipped_x0, clipped_x1], [clipped_y0, clipped_y1], 'r', label='Clipped Line')

plt.legend()
plt.show()
