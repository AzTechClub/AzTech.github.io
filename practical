
#include <cmath>
using namespace std;

class Triangle {
private:
    double s1, s2, s3;

    bool valid() {
        return (side1 > 0 && side2 > 0 && side3 > 0) &&
               (side1 + side2 > side3) && (side2 + side3 > side1) && (side1 + side3 > side2);
    }

public:
    Triangle(double s1, double s2, double s3) : s1(s1), s2(s2), s3(s3) {
        if (!isValid()) {
            throw std::invalid_argument("Invalid sides for a triangle!");
        }
    }

    double calculateArea() {
        double s = (side1 + side2 + side3) / 2;
        return sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    double calculateArea(double base, double height) {
        return (base * height) / 2;
    }
};

int main() {
    try {
        Triangle rightTriangle(3, 4, 5);
        double rightTriangleArea = rightTriangle.calculateArea(3, 4);
        std::cout << "Area of right-angled triangle: " << rightTriangleArea << std::endl;

        Triangle generalTriangle(5, 6, 7);
        double generalTriangleArea = generalTriangle.calculateArea();
        std::cout << "Area of general triangle: " << generalTriangleArea << std::endl;

        Triangle invalidTriangle(1, 2, 3);  // Invalid sides, will throw an exception
    } catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
